plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.modmuss50.mod-publish-plugin"

    version = "${rootProject.mod_version}+${rootProject.minecraft_version}-${name}"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    Map<String, Map<String, String>> platformSettings = [
            "fabric": [
                    "curse-id": "391366",
                    "modrinth-id": "muf0XoRe"
            ],
            "neoforge": [
                    "curse-id": "368293",
                    "modrinth-id": "QDNS5oAT"
            ]
    ]

    Map<String, Map<String, Boolean>> platformDependencies = [
            "fabric": [
                    "fabric-api": true,
                    "midnightlib": true
            ],
            "neoforge": []
    ]

    var env = System.getenv()
    def uploadSettings = platformSettings.get(name)
    def uploadDependencies = platformDependencies.get(name)

    if (uploadSettings != null && uploadDependencies != null) {

        File changeLog = rootProject.file("CHANGELOG.md")
        String changelogText = changeLog.exists() ? changeLog.text : ""

        publishMods {
            file = tasks.remapJar.archiveFile
            type = STABLE
            changelog = changelogText

            displayName = "Repurposed Structures v${rootProject.mod_version} (${rootProject.minecraft_version} MC ${name.capitalize()})"
            version = "${project.version}"
            modLoaders.add(name)

            if (env.CURSEFORGEKEY) {
                curseforge {
                    accessToken = env.CURSEFORGEKEY
                    projectId = uploadSettings["curse-id"]
                    minecraftVersions.add(rootProject.minecraft_version)

                    if (uploadDependencies.size() > 0) {
                        uploadDependencies.each { dep, required ->
                            if (required) {
                                requires(dep)
                            }
                            else {
                                optional(dep)
                            }
                        }
                    }
                }
            }

            if (env.MODRINTH_TOKEN) {
                modrinth {
                    accessToken = env.MODRINTH_TOKEN
                    projectId = uploadSettings["modrinth-id"]
                    minecraftVersions.add(rootProject.minecraft_version)

                    dependencies {
                        uploadDependencies.each { dep, required ->
                            if (required) {
                                requires(dep)
                            } else {
                                optional(dep)
                            }
                        }
                    }
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.mod_id
    version = "${rootProject.mod_version}+${rootProject.minecraft_version}-${name}"
    group = rootProject.maven_group

    repositories {
        maven { url "https://maven.neoforged.net/releases/" }
        maven {
            url = 'https://maven.cafeteria.dev/releases'
            content {
                includeGroup 'dev.cafeteria'
            }
        }
        maven { url "https://nexus.resourcefulbees.com/repository/telepathicgrunt/" }
        maven { url "https://maven.architectury.dev/" }
        maven { url "https://maven.shedaniel.me" }
        maven { url "https://jitpack.io" }
        maven { url "https://www.cursemaven.com" }
        maven { url "https://api.modrinth.com/maven/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

task buildAndReleaseAll{
    dependsOn(':common:buildAndRelease', ':neoforge:buildAndRelease', ':fabric:buildAndRelease')
}